/*
 * Copyright 2015-16 Golden Delicious Computers
 *
 * Author: Nikolaus Schaller <hns@goldelico.com>
 *
 * This file is subject to the terms and conditions of version 2 of
 * the GNU General Public License.  See the file COPYING in the main
 * directory of this archive for more details.
 *
 * LED driver for the aw21FL319{0,1,3,6,9} to drive 1, 3, 6 or 9 light
 * effect LEDs.
 *
 */

#include <linux/err.h>
#include <linux/i2c.h>
#include <linux/leds.h>
#include <linux/module.h>
#include <linux/of.h>
#include <linux/of_device.h>
#include <linux/regmap.h>
#include <linux/slab.h>

#include <linux/gpio.h>
#include <linux/of_gpio.h>

/* register numbers */
#define AW21024_SHUTDOWN	0x00
#define AW21024_CTRL1		0x01
#define AW21024_CTRL2		0x02
#define AW21024_CONFIG1		0x03
#define AW21024_CONFIG2		0x04
#define AW21024_RAMP_MODE		0x05
#define AW21024_BREATH_MASK		0x06
#define AW21024_PWM(channel)		(0x07 + channel)
#define AW21024_DATA_UPDATE		0x10
#define AW21024_T0(channel)		(0x11 + channel)
#define AW21024_T123_1		0x1a
#define AW21024_T123_2		0x1b
#define AW21024_T123_3		0x1c
#define AW21024_T4(channel)		(0x1d + channel)
#define AW21024_TIME_UPDATE		0x26
#define AW21024_RESET		0xff

#define AW21024_REG_CNT		(AW21024_RESET + 1)

#define AW21024_MAX_LEDS		24

/* CS (Current Setting) in CONFIG2 register */
#define AW21024_CONFIG2_CS_SHIFT	4
#define AW21024_CONFIG2_CS_MASK	0x7
#define AW21024_CONFIG2_CS_STEP_REF	12

#define AW21024_CURRENT_MIN		((u32)5000)
#define AW21024_CURRENT_MAX		((u32)40000)
#define AW21024_CURRENT_STEP		((u32)5000)
#define AW21024_CURRENT_DEFAULT	((u32)20000)

/* Audio gain in CONFIG2 register */
#define AW21024_AUDIO_GAIN_DB_MAX	((u32)21)
#define AW21024_AUDIO_GAIN_DB_STEP	((u32)3)

/*
 * regmap is used as a cache of chip's register space,
 * to avoid reading back brightness values from chip,
 * which is known to hang.
 */
struct AW21024_chip {
	const struct AW21024_chipdef *cdef;
	struct i2c_client               *client;
	struct regmap                   *regmap;
	struct mutex                    lock;
	u32                             audio_gain_db;

	struct AW21024_led {
		struct AW21024_chip *chip;
		struct led_classdev cdev;
		u32 max_microamp;
		bool configured;
	} leds[AW21024_MAX_LEDS];
};

struct AW21024_chipdef {
	int num_leds;
};

static const struct AW21024_chipdef AW21024_cdef = {
	.num_leds = 24,
};

static const struct of_device_id of_AW21024_match[] = {
	{ .compatible = "issi,AW21024", .data = &AW21024_cdef, },
	{ }
};
MODULE_DEVICE_TABLE(of, of_AW21024_match);

u8 ctrl2_data = 0;

static int AW21024_brightness_default_set(struct AW21024_chip *aw21)
{
	int ret;
	int i;

	mutex_lock(&aw21->lock);

	for (i = 0; i < 7; i++) {

		ret = regmap_write(aw21->regmap, AW21024_PWM(i), 127);
		if (ret < 0)
			goto out;
	}

	regmap_write(aw21->regmap, AW21024_CTRL1, 0x77);
	regmap_write(aw21->regmap, AW21024_CTRL2, 0x07);
	regmap_write(aw21->regmap, AW21024_DATA_UPDATE, 0x00);
	regmap_write(aw21->regmap, AW21024_SHUTDOWN, 0x01);

out:
	mutex_unlock(&aw21->lock);

	return ret;
}

static int AW21024_brightness_set(struct led_classdev *cdev, enum led_brightness brightness)
{
	struct AW21024_led *led = container_of(cdev, struct AW21024_led, cdev);
	struct AW21024_chip *aw21 = led->chip;
	int chan = led - aw21->leds;
	int ret;
	int i;
	u8 ctrl1 = 0, ctrl2 = 0;

	// dev_err(&aw21->client->dev, "%s %d: %d\n", __func__, chan, brightness);

	mutex_lock(&aw21->lock);

	regmap_write(aw21->regmap, AW21024_CONFIG2, ctrl2_data | 0x40);

	/* update PWM register */
	ret = regmap_write(aw21->regmap, AW21024_PWM(chan), brightness);
	if (ret < 0)
		goto out;

	/* read current brightness of all PWM channels */
	for (i = 0; i < aw21->cdef->num_leds; i++) {
		unsigned int pwm_value;
		bool on;

		/*
		 * since neither cdev nor the chip can provide
		 * the current setting, we read from the regmap cache
		 */

		ret = regmap_read(aw21->regmap, AW21024_PWM(i), &pwm_value);
		// dev_err(&aw21->client->dev, "%s read %d: ret=%d: %d\n",
		// 	__func__, i, ret, pwm_value);
		on = ret >= 0 && pwm_value > LED_OFF;

		if (i < 3)
			ctrl1 |= on << i;       /* 0..2 => bit 0..2 */
		else if (i < 6)
			ctrl1 |= on << (i + 1); /* 3..5 => bit 4..6 */
		else
			ctrl2 |= on << (i - 6); /* 6..8 => bit 0..2 */
	}

	if (ctrl1 > 0 || ctrl2 > 0) {
		// dev_err(&aw21->client->dev, "power up %02x %02x\n", ctrl1, ctrl2);
		regmap_write(aw21->regmap, AW21024_CTRL1, ctrl1);
		regmap_write(aw21->regmap, AW21024_CTRL2, ctrl2);
		/* update PWMs */
		regmap_write(aw21->regmap, AW21024_DATA_UPDATE, 0x00);
		/* enable chip from shut down */
		ret = regmap_write(aw21->regmap, AW21024_SHUTDOWN, 0x01);
	} else {
		// dev_err(&aw21->client->dev, "power down\n");
		/* shut down (no need to clear CTRL1/2) */
		ret = regmap_write(aw21->regmap, AW21024_SHUTDOWN, 0x00);
	}

out:
	mutex_unlock(&aw21->lock);

	return ret;
}

static int AW21024_parse_child_dt(const struct device *dev, const struct device_node *child, struct AW21024_led *led)
{
	struct led_classdev *cdev = &led->cdev;
	int ret;

	if (of_property_read_string(child, "label", &cdev->name))
		cdev->name = child->name;

	ret = of_property_read_string(child, "linux,default-trigger",
				      &cdev->default_trigger);
	if (ret < 0 && ret != -EINVAL) /* is optional */
		return ret;

	led->max_microamp = AW21024_CURRENT_DEFAULT;
	ret = of_property_read_u32(child, "led-max-microamp", &led->max_microamp);
	if (!ret) {
		if (led->max_microamp < AW21024_CURRENT_MIN)
			return -EINVAL;	/* not supported */
		led->max_microamp = min(led->max_microamp, AW21024_CURRENT_MAX);
	}

	return 0;
}

static int AW21024_parse_dt(struct device *dev, struct AW21024_chip *aw21)
{
	struct device_node *np = dev->of_node, *child;
	const struct of_device_id *of_dev_id;
	int count;
	int ret;

	if (!np)
		return -ENODEV;

	of_dev_id = of_match_device(of_AW21024_match, dev);
	if (!of_dev_id) {
		dev_err(dev, "Failed to match device with supported chips\n");
		return -EINVAL;
	}

	aw21->cdef = of_dev_id->data;

	count = of_get_child_count(np);

	dev_dbg(dev, "probe %s with %d leds defined in DT\n", of_dev_id->compatible, count);

	if (!count || count > aw21->cdef->num_leds) {
		dev_err(dev, "Number of leds defined must be between 1 and %u\n", aw21->cdef->num_leds);
		return -ENODEV;
	}

	for_each_child_of_node(np, child) {
		struct AW21024_led *led;
		u32 reg;

		ret = of_property_read_u32(child, "reg", &reg);
		if (ret) {
			dev_err(dev, "Failed to read led 'reg' property\n");
			goto put_child_node;
		}

		if (reg < 1 || reg > aw21->cdef->num_leds) {
			dev_err(dev, "invalid led reg %u\n", reg);
			ret = -EINVAL;
			goto put_child_node;
		}

		led = &aw21->leds[reg - 1];

		if (led->configured) {
			dev_err(dev, "led %u is already configured\n", reg);
			ret = -EINVAL;
			goto put_child_node;
		}

		ret = AW21024_parse_child_dt(dev, child, led);
		if (ret) {
			dev_err(dev, "led %u DT parsing failed\n", reg);
			goto put_child_node;
		}

		led->configured = true;
	}

	aw21->audio_gain_db = 0;
	ret = of_property_read_u32(np, "audio-gain-db", &aw21->audio_gain_db);
	if (!ret)
		aw21->audio_gain_db = min(aw21->audio_gain_db, AW21024_AUDIO_GAIN_DB_MAX);

	return 0;

put_child_node:
	of_node_put(child);
	return ret;
}

static bool AW21024_readable_reg(struct device *dev, unsigned int reg)
{ /* we have no readable registers */
	return false;
}

static bool AW21024_volatile_reg(struct device *dev, unsigned int reg)
{ /* volatile registers are not cached */
	switch (reg) {
	case AW21024_DATA_UPDATE:
	case AW21024_TIME_UPDATE:
	case AW21024_RESET:
		return true; /* always write-through */
	default:
		return false;
	}
}

static const struct reg_default AW21024_reg_defaults[] = {
	{ AW21024_CONFIG1, 0x00},
	{ AW21024_CONFIG2, 0x41},
	{ AW21024_PWM(0), 0x7f},
	{ AW21024_PWM(1), 0x7f},
	{ AW21024_PWM(2), 0x7f},
	{ AW21024_PWM(3), 0x7f},
	{ AW21024_PWM(4), 0x7f},
	{ AW21024_PWM(5), 0x7f},
	{ AW21024_PWM(6), 0x7f},
	{ AW21024_PWM(7), 0x00},
	{ AW21024_PWM(8), 0x00},
};

static struct regmap_config regmap_config = {
	.reg_bits = 8,
	.val_bits = 8,
	.max_register = AW21024_REG_CNT,
	.cache_type = REGCACHE_FLAT,
	.readable_reg = AW21024_readable_reg,
	.volatile_reg = AW21024_volatile_reg,
	.reg_defaults = AW21024_reg_defaults,
	.num_reg_defaults = ARRAY_SIZE(AW21024_reg_defaults),
};

static inline int AW21024_microamp_to_cs(struct device *dev, u32 microamp)
{ /* round down to nearest supported value (range check done by caller) */
	u32 step = microamp / AW21024_CURRENT_STEP;

	return ((AW21024_CONFIG2_CS_STEP_REF - step) & AW21024_CONFIG2_CS_MASK) << AW21024_CONFIG2_CS_SHIFT; /* CS encoding */
}

static inline int AW21024_db_to_gain(u32 dezibel)
{ /* round down to nearest supported value (range check done by caller) */
	return dezibel / AW21024_AUDIO_GAIN_DB_STEP;
}

static int AW21024_probe(struct i2c_client *client, const struct i2c_device_id *id)
{
	struct AW21024_chip *aw21;
	struct device *dev = &client->dev;
	struct i2c_adapter *adapter = to_i2c_adapter(dev->parent);
	int err;
	int i = 0;
	u32 aggregated_led_microamp = AW21024_CURRENT_MAX;
	static int reset_gpio;
	struct device_node *np = NULL;

	if (!i2c_check_functionality(adapter, I2C_FUNC_I2C))
		return -EIO;

	aw21 = devm_kzalloc(&client->dev, sizeof(*aw21), GFP_KERNEL);
	if (!aw21)
		return -ENOMEM;

	mutex_init(&aw21->lock);

	err = AW21024_parse_dt(&client->dev, aw21);
	if (err)
		goto free_mutex;

	aw21->client = client;
	aw21->regmap = devm_regmap_init_i2c(client, &regmap_config);
	if (IS_ERR(aw21->regmap)) {
		dev_err(&client->dev, "failed to allocate register map\n");
		err = PTR_ERR(aw21->regmap);
		goto free_mutex;
	}

	i2c_set_clientdata(client, aw21);
	dev_err(&client->dev, "jssong: %d", __LINE__);

	np = client->dev.of_node;

	reset_gpio = of_get_named_gpio(np, "reset-gpio", 0);
	if (reset_gpio)
	{
		devm_gpio_request_one(&client->dev, reset_gpio, GPIOF_OUT_INIT_HIGH, NULL);
		msleep_interruptible(100);
		gpio_set_value_cansleep(reset_gpio, 0);
		msleep_interruptible(100);
		gpio_set_value_cansleep(reset_gpio, 1);
		msleep_interruptible(100);
	}

	dev_err(&client->dev, "jssong: %d", __LINE__);

	/* check for write-reply from chip (we can't read any registers) */
	err = regmap_write(aw21->regmap, AW21024_RESET, 0x00);
	if (err < 0) {
		dev_err(&client->dev, "no response from chip write: err = %d\n",
			err);
		// err = -EIO; /* does not answer */
		// goto free_mutex;
	}
	dev_err(&client->dev, "jssong: %d", __LINE__);

	/*
	 * Kernel conventions require per-LED led-max-microamp property.
	 * But the chip does not allow to limit individual LEDs.
	 * So we take minimum from all subnodes for safety of hardware.
	 */
	for (i = 0; i < aw21->cdef->num_leds; i++)
		if (aw21->leds[i].configured && aw21->leds[i].max_microamp < aggregated_led_microamp)
			aggregated_led_microamp = aw21->leds[i].max_microamp;

	dev_err(&client->dev, "jssong: %d", __LINE__);
	ctrl2_data = AW21024_microamp_to_cs(dev, aggregated_led_microamp) | AW21024_db_to_gain(aw21->audio_gain_db);
	regmap_write(aw21->regmap, AW21024_CONFIG2, ctrl2_data);


	for (i = 0; i < aw21->cdef->num_leds; i++) {
		struct AW21024_led *led = &aw21->leds[i];

		dev_err(&client->dev, "jssong: %d", __LINE__);
		if (!led->configured)
			continue;

		led->chip = aw21;
		led->cdev.brightness_set_blocking = AW21024_brightness_set;

		err = devm_led_classdev_register(&client->dev, &led->cdev);
		if (err < 0)
			goto free_mutex;
	}

	// AW21024_brightness_default_set(aw21);

	dev_err(&client->dev, "jssong: %d", __LINE__);
	return 0;

free_mutex:
	mutex_destroy(&aw21->lock);
	return err;
}

static int AW21024_remove(struct i2c_client *client)
{
	struct AW21024_chip *aw21 = i2c_get_clientdata(client);

	mutex_destroy(&aw21->lock);
	return 0;
}

/*
 * i2c-core (and modalias) requires that id_table be properly filled,
 * even though it is not used for DeviceTree based instantiation.
 */
static const struct i2c_device_id AW21024_id[] = {
	{ "aw21024" },
	{},
};
MODULE_DEVICE_TABLE(i2c, AW21024_id);

static struct i2c_driver AW21024_driver = {
	.driver = {
		.name = "leds-AW21024",
		.of_match_table = of_match_ptr(of_AW21024_match),
		},
	.probe = AW21024_probe,
	.remove = AW21024_remove,
	.id_table = AW21024_id,
};

module_i2c_driver(AW21024_driver);

MODULE_AUTHOR("H. Nikolaus Schaller <hns@goldelico.com>");
MODULE_AUTHOR("Andrey Utkin <andrey_utkin@fastmail.com>");
MODULE_DESCRIPTION("AW21024 LED driver");
MODULE_LICENSE("GPL v2");
